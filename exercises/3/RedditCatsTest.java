// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxDriverLogLevel;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.net.MalformedURLException;
import java.net.URL;
public class RedditCatsTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    System.setProperty("webdriver.gecko.driver", "Firefox/geckodriver-win64.exe");
    System.setProperty("webdriver.firefox.logfile", "/dev/null");
    driver = new FirefoxDriver();
    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);    
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void fUNTITLE() {
    // Test name: FUN-TITLE
    // Step # | name | target | value
    // 1 | open | /r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1200x800 | 
    driver.manage().window().setSize(new Dimension(1200, 800));
    // 3 | assertTitle | Cats | 
    assertThat(driver.getTitle(), is("Cats"));
  }
  @Test
  public void fUNSIGNUPLINK() {
    // Test name: FUN-SIGNUP-LINK
    // Step # | name | target | value
    // 1 | open | /r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1200x800 | 
    driver.manage().window().setSize(new Dimension(1200, 800));
    // 3 | storeAttribute | linkText=Sign Up@href | signup_href
    {
      WebElement element = driver.findElement(By.linkText("Sign Up"));
      String attribute = element.getAttribute("href");
      vars.put("signup_href", attribute);
    }
    // 4 | assert | signup_href | https://www.reddit.com/register/?dest=https%3A%2F%2Fwww.reddit.com%2Fr%2Fcats%2F
    assertEquals(vars.get("signup_href").toString(), "https://www.reddit.com/register/?dest=https%3A%2F%2Fwww.reddit.com%2Fr%2Fcats%2F");
  }
  @Test
  public void fUNJOINBUTTONEXISTS() {
    // Test name: FUN-JOIN-BUTTON-EXISTS
    // Step # | name | target | value
    // 1 | open | /r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1200x800 | 
    driver.manage().window().setSize(new Dimension(1200, 800));
    // 3 | assertText | css=.\_1Q_zPN5YtTLQVG72WhRuf3 > .\_1LHxa-yaHJwrPK8kuyv_Y4 | Join
    assertThat(driver.findElement(By.cssSelector(".\\_1Q_zPN5YtTLQVG72WhRuf3 > .\\_1LHxa-yaHJwrPK8kuyv_Y4")).getText(), is("Join"));
  }
  @Test
  public void fUNRULE3() {
    // Test name: FUN-RULE-3
    // Step # | name | target | value
    // 1 | open | /r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1200x800 | 
    driver.manage().window().setSize(new Dimension(1200, 800));
    // 3 | assertText | css=.\_8ZLJI1-ZiP7pHJ_yO1L4Z:nth-child(3) .tbIApBd2DM_drfZQJjIum | No NSFW, animal abuse, or cruelty
    assertThat(driver.findElement(By.cssSelector(".\\_8ZLJI1-ZiP7pHJ_yO1L4Z:nth-child(3) .tbIApBd2DM_drfZQJjIum")).getText(), is("No NSFW, animal abuse, or cruelty"));
  }
  @Test
  public void fUNRULES10ITEMS() {
    // Test name: FUN-RULES-10-ITEMS
    // Step # | name | target | value
    // 1 | open | /r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1200x800 | 
    driver.manage().window().setSize(new Dimension(1200, 800));
    // 3 | assertElementPresent | xpath=//div[2]/div[10]/div/div/div | 
    {
      List<WebElement> elements = driver.findElements(By.xpath("//div[2]/div[10]/div/div/div"));
      assert(elements.size() > 0);
    }
    // 4 | assertElementNotPresent | xpath=//div[2]/div[11]/div/div/div | 
    {
      List<WebElement> elements = driver.findElements(By.xpath("//div[2]/div[11]/div/div/div"));
      assert(elements.size() == 0);
    }
  }
  @Test
  public void fUNSEARCHSMELLYCAT() {
    // Test name: FUN-SEARCH-SMELLY-CAT
    // Step # | name | target | value
    // 1 | open | /r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1200x800 | 
    driver.manage().window().setSize(new Dimension(1200, 800));
    // 3 | click | id=header-search-bar | 
    driver.findElement(By.id("header-search-bar")).click();
    // 4 | type | id=header-search-bar | smelly cat
    driver.findElement(By.id("header-search-bar")).sendKeys("smelly cat");
    // 5 | sendKeys | id=header-search-bar | ${KEY_ENTER}
    driver.findElement(By.id("header-search-bar")).sendKeys(Keys.ENTER);
    // 6 | assertText | xpath=//h3/span | smelly cat
    assertThat(driver.findElement(By.xpath("//h3/span")).getText(), is("smelly cat2"));
  }
}
